# Project language is PHP
language: php

# Use containerized infrastructure
sudo: false

# Test on Ubuntu Xenial (16.04)
dist: xenial

# Supported PHP-Versions
php:
  - 7.2
  - 7.3

# Cache Composer's cache
cache:
  directories:
    - $HOME/.composer/cache/files
    - $HOME/pecl_cache
    - $HOME/build/koseven/koseven/ImageMagick-7.0.8-34

# Also Test on Trusty (14.04 LTS)
matrix:
  include:
    - dist: trusty
      php: 7.2
    - dist: trusty
      php: 7.3

# Services to start (with their default configuration)
services:
  - redis-server
  - memcached
  - mysql

addons:
  apt:
    update: true

# Execute this commands before installing dependencies
before_install:
  - sudo apt-get install -y libwebp-dev
  - if [ ! -d "ImageMagick-7.0.8-34" ]; then
  - wget http://www.imagemagick.org/download/ImageMagick.tar.gz
  - tar -xvf ImageMagick.tar.gz
  - cd ImageMagick-7.0.8-34
  - ./configure --with-webp=yes
  - make
  - fi
  - if [ -d "ImageMagick-7.0.8-34" ]; then
  - cd ImageMagick-7.0.8-34
  - fi
  - sudo make install
  - sudo ldconfig /usr/local/lib
  - cd $HOME/build/koseven/koseven
  - composer self-update
  - composer validate
  - mysql -e 'CREATE DATABASE IF NOT EXISTS unittest;'

# Install dependencies
install:
  - composer require phwoolcon/ci-pecl-cacher -n
  - pecl list-files redis | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install redis
  - pecl list-files imagick | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install imagick
  - pecl list-files apcu | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install apcu
  - pecl list-files yaml | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install yaml

# Execute commands before executing script (e.g Add extensions to php.ini)
before_script:
  - echo "extension = memcached.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = redis.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = imagick.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = apcu.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = yaml.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini

# Execute commands which should make the build pass or fail
script:
  - vendor/bin/phpunit

# Execute commands which should run after successful build
after_success:
  - travis_retry vendor/bin/php-coveralls

# Disable E-Mail notifications
notifications:
  email: false
