# Project language is PHP
language: php

# Use containerized infrastructure
sudo: false

# Test on Ubuntu Xenial (16.04)
dist: xenial

# Supported PHP-Versions
php:
  - 7.3

# Required apt_packages
addons:
  apt:
    packages:
      - libjpeg-dev
      - libpng-dev
      - libgif-dev

# Global envs
env:
  global:
    - IMAGEMAGICK_VERSION: '7.0.3-10'
    - LIBWEBP_VERSION: '0.5.1'

# Cache Composer's cache
cache:
  directories:
    - $HOME/.composer/cache/files
    - $HOME/pecl_cache

# Services to start (with their default configuration)
services:
  - redis-server
  - memcached
  - mysql

# Execute this commands before installing dependencies
before_install:
  # Update PATH so that travis can find newer imagemagick
  - export PATH=$HOME/opt/bin:$PATH

  # Checks if Imagemagick is already sufficient version
  # If not installs it from the sources
  - convert -version | grep $IMAGEMAGICK_VERSION || {
    export CORES=$(nproc) &&
    echo "Using $CORES cores for compiling..." &&
    cd /tmp &&
    curl -O https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-$LIBWEBP_VERSION.tar.gz &&
    tar xvzf libwebp-$LIBWEBP_VERSION.tar.gz &&
    cd libwebp-* &&
    ./configure --prefix=$HOME/opt &&
    make -j$CORES &&
    make install -j$CORES &&
    cd /tmp &&
    curl -O https://www.imagemagick.org/download/ImageMagick-$IMAGEMAGICK_VERSION.tar.gz &&
    tar xvzf ImageMagick-$IMAGEMAGICK_VERSION.tar.gz &&
    cd ImageMagick-* &&
    ./configure --prefix=$HOME/opt &&
    make -j$CORES &&
    make install -j$CORES &&
    $HOME/opt/bin/magick -version | grep $IMAGEMAGICK_VERSION &&
    cd $TRAVIS_BUILD_DIR; }

  # Update library paths for programs
  - export LD_FLAGS=-L$HOME/opt/lib
  - export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:$HOME/opt/lib
  - export CPATH=$CPATH:$HOME/opt/include

  # Composer update and Database creation
  - composer self-update
  - composer validate
  - mysql -e 'CREATE DATABASE IF NOT EXISTS unittest;'

# Install dependencies
install:
  - composer require phwoolcon/ci-pecl-cacher -n
  - pecl list-files redis | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install redis
  - pecl list-files imagick | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install imagick
  - pecl list-files apcu | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install apcu
  - pecl list-files yaml | grep -v 'not installed' || echo "\n" | vendor/bin/ci-pecl-install yaml

# Execute commands before executing script (e.g Add extensions to php.ini)
before_script:
  - echo "extension = memcached.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = redis.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = imagick.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = apcu.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "extension = yaml.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini

# Execute commands which should make the build pass or fail
script:
  - vendor/bin/phpunit

# Execute commands which should run after successful build
after_success:
  - travis_retry vendor/bin/php-coveralls

# Disable E-Mail notifications
notifications:
  email: false
